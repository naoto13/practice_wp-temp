	
class my_widgets_item1 extends WP_Widget {
	//初期化（管理画面で表示するヴィジェットの名前を設定する）
	// 初期化用のメソッドは、クラス名と同じ方が良い(my_widgets_item1)
	function my_widgets_item1()
	{
		// 管理画面に表示される名前をメリットヴィジェットへ
		parent::WP_Widget(false, $name = 'メリットヴィジェット');
	}

	//ヴィジェットの入力項目を作成する処理
	// formを使用することで自動的にWPで出力された値を呼び出せるので、引数（$instance）のなかに格納している
	function form($instance){
		// 入力された情報をサニタイズ（＜や＞などの文字無害化）して変数へ格納するのがesc_attr
		$title = esc_attr($instance['title']);
		$body = esc_attr($instance['body']);
	}
}
    
    <p>
		<!-- ヴィジェットのtitleという入力項目のidを取得している -->
		<label for="<?php echo $this->get_field_id('title'); ?>">
			<?php echo 'タイトル:'; ?>
		</label>
		<!-- ここでlabelのfor属性名とinputのid属性名を同じにすると、上のラベル（タイトルという文字）をクリックした時に入力フォームのinputにフォーカスが当たるようになっている -->
		<!-- 最後にvalueに入れることでDBのデータを表示できるようにする -->
		<input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo $title; ?>" />
	</p>
	<p>
		<label for="<?php echo $this->get_field_id('body'); ?>">
			<?php echo '内容：'; ?>
		</label>
		<textarea class="widefat" rows="16" cols="20" id="<?php echo $this->get_field_id('body'); ?>" name="<?php echo $this->get_field_name('body'); ?>"><?php echo $body; ?></textarea>
	</p>
<?php
	}

	//ヴィジェットに入力された情報を保存する処理
	//wp側の関数。update(新しい,古い)
	function update($new_instance, $old_instance){
		$instance = $old_instance; //一旦、前のデータを呼び出して
		//下2つはサニタイズ
		$instance['title'] = strip_tags($new_instance['title']); //php,htmlのタグを取り除く
		$instance['body'] = trim($new_instance['body']); //前後の空白を取り除くだけ。なのでbodyはhtml記法のリンク（href）が使用可能

		return $instance; //最後にreturnで返すと、$new_instanceとなる
	}

	//管理画面から入力されたヴィジェットを画面に表示する処理
	// register_sidebarで決められたヴィジェットの中身が$argsのなかに連想配列として渡ってきている
	// $argsにはregister_sidebar'で設定した「before_title, after_title, before_widget, after_widget」が入る
	// $instance  Widgetの設定項目
	// widget(渡すもの,渡す先)
	function widget($args, $instance) {
		//配列を変数に展開（配列のkey名をそのまま変数として使用可能に）
		extract($args);

		//ヴィジェットから入力された情報を取得
		// WPのフィルターフックという機能。apply_filtersは、widget_titleと名前のついた処理を行い、返す
		//DBで取得したものを返すだけではなく、何か処理を挟みたい場合に使用する
		//実際に今回はwidget_titleやwidget_bodyは用意してないので、ただ変数に格納しているだけである
		$title = apply_filters('widget_title', $instance['title']);
		$body = apply_filters('widget_body', $instance['body']);

		//ヴィジェットから入力された情報がある場合、htmlを表示する
		if ($title){
?>
			<!-- 今回実装したいのは、パネル状で、タイトルとbodyに別れたやり方 -->
			<section class="panel">
				<h2><?php echo $title; ?></h2>
				<p>
					<?php echo $body; ?>
				</p>
			</section>